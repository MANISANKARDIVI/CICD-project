Terraform file
````````
$ vi main.tf


terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "5.26.0"
    }
  }
}

# !choose provider (ex: AWS)
provider "aws" {
  region = "ap-south-2"
}

# !creation of Multiple-Instances
resource "aws_instance" "demo-Instance" {
  ami           = "ami-0287a05f0ef0e9d9a"
  instance_type = "t2.micro"
  key_name      = "Enter_your_pem.key"
  #security_groups = ["All-Traffic"]
  vpc_security_group_ids = [aws_security_group.All-Traffic.id]
  subnet_id              = aws_subnet.demo-subnet-1.id
  for_each               = toset(["Jenkins-Master", "Jenkins-Slave", "Ansible-Master", ])

  tags = {
    Name = "${each.key}"
  }
}

# !creation of VPC
resource "aws_vpc" "demo-vpc" {
  cidr_block       = "10.1.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "demo-vpc"
  }
}

# !creation of subnet-1
resource "aws_subnet" "demo-subnet-1" {
  vpc_id                  = aws_vpc.demo-vpc.id
  cidr_block              = "10.1.1.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "ap-south-2a"

  tags = {
    Name = "demo-subnet-1"
  }
}

# !creation of subnet-2
resource "aws_subnet" "demo-subnet-2" {
  vpc_id                  = aws_vpc.demo-vpc.id
  cidr_block              = "10.1.2.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "ap-south-2b"

  tags = {
    Name = "demo-subnet-2"
  }
}

# !creation of subnet-3
resource "aws_subnet" "demo-subnet-3" {
  vpc_id                  = aws_vpc.demo-vpc.id
  cidr_block              = "10.1.3.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "ap-south-2c"

  tags = {
    Name = "demo-subnet-3"
  }
}

# !creation of Internet-Gateway
resource "aws_internet_gateway" "demo-IGW" {
  vpc_id = aws_vpc.demo-vpc.id

  tags = {
    Name = "demo-IGW"
  }
}

# !creation of Route-Table
resource "aws_route_table" "demo-RT" {
  vpc_id = aws_vpc.demo-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.demo-IGW.id
  }
  tags = {
    Name = "demo-RT"
  }
}

# !creation of route-table-association subnet-1&2&3
resource "aws_route_table_association" "demo-RTA-subnet-1" {
  subnet_id      = aws_subnet.demo-subnet-1.id
  route_table_id = aws_route_table.demo-RT.id
}

resource "aws_route_table_association" "demo-RTA-subnet-2" {
  subnet_id      = aws_subnet.demo-subnet-2.id
  route_table_id = aws_route_table.demo-RT.id
}

resource "aws_route_table_association" "demo-RTA-subnet-3" {
  subnet_id      = aws_subnet.demo-subnet-3.id
  route_table_id = aws_route_table.demo-RT.id
}

# !creation of Security Group
resource "aws_security_group" "All-Traffic" {
  name        = "All-Traffic"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.demo-vpc.id

  ingress {
    description = "In-bound"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    description = "Out-bound"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "All-Traffic"
  }
}


$ terraform init

$terraform validate

$ terraform fmt

$ terraform test

$ terraform plan

$ terraform apply --auto-approve